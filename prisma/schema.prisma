generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model DraftEvent {
  id                        String                 @id @default(uuid())
  parentid                  String?
  impactAssessmentId        String?
  draftImpactAssessment     DraftImpactAssessment? @relation(fields: [impactAssessmentId], references: [id])
  type                      String?
  embargoed                 String?
  estimatedStartDate        DateTime?
  startDate                 DateTime?
  endDate                   DateTime?
  frequency                 String?
  frequencyInterval         Int?
  customFrequency           String?
  selectedDay               String?
  title                     String?
  scheme                    String?
  description               String?
  affectedCohortDescription String?
  estimatedCohortSize       Int?
  cluster                   String?
  group                     String?
  department                String?
  OIC                       String?
  OICEmail                  String?
  reportStatus              String?
}

model DraftImpactAssessment {
  id                          String       @id
  draftEvents                 DraftEvent[]
  perceivedUnhappiness        String?
  perceivedUnhappinessDetails String?
  generateInterest            String?
  generateInterestDetails     String?
  haveAnnouncement            String?
  announcementTypes           String[]
  haveNotification            String?
  notificationTypes           String[]
  notificationDetails         String?
  haveActionRequired          String?
  actionRequiredDetails       String?
  dataInsightDetails          String?
  initiativesDetails          String?
  eventWriteUp                String?
  clearingHOD                 String?
}

model SubmittedEvent {
  id                        String                     @id @default(uuid())
  parentid                  String?
  impactAssessmentId        String?
  submittedImpactAssessment SubmittedImpactAssessment? @relation(fields: [impactAssessmentId], references: [id])
  type                      String
  embargoed                 String
  startDate                 DateTime
  endDate                   DateTime?
  frequency                 String
  frequencyInterval         Int?
  customFrequency           String?
  selectedDay               String?
  title                     String
  scheme                    String
  description               String
  affectedCohortDescription String
  estimatedCohortSize       Int
  cluster                   String
  group                     String
  department                String
  OIC                       String
  OICEmail                  String
  reportStatus              String
  // lastUpdatedBy          String?
  // lastUpdated                 DateTime?                  @updatedAt()

  @@index(fields: [startDate])
}

model SubmittedImpactAssessment {
  id                          String           @id
  submittedEvents             SubmittedEvent[]
  perceivedUnhappiness        String
  perceivedUnhappinessDetails String?
  generateInterest            String
  generateInterestDetails     String?
  haveAnnouncement            String
  announcementTypes           String[]
  haveNotification            String
  notificationTypes           String[]
  notificationDetails         String?
  haveActionRequired          String
  actionRequiredDetails       String?
  dataInsightDetails          String
  initiativesDetails          String
  eventWriteUp                String
  clearingHOD                 String?
  // lastUpdatedBy          String?
  // lastUpdated                   DateTime?        @updatedAt()
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // group         String?
  // department    String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// To Remove Later
model AuthorizedUsers {
  id    String  @id @default(cuid())
  email String  @unique
  role  String? @default("guest")
}
